# This workflow will install Python dependencies,
# run tests and lint with a variety of Python versions
---
name: Tests
on: [push, pull_request]

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  cpython:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14-dev']

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -e ".[tests]"
      - name: Test with pytest, excluding hypothesis tests
        run: >-
          pytest tests
          --ignore=tests/hypothesis

  hypothesis-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -e ".[tests]"
      - name: Test with pytest including hypothesis tests
        run: >-
          pytest tests --hypothesis-profile=ci

  test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -e ".[tests]"
      - name: Test with pytest including hypothesis tests and coverage
        run: >-
          pytest tests
          --cov=tests --cov=pygeoif --cov-report=xml
          --hypothesis-profile=coverage
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  static-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -e ".[typing, complexity, linting]"
      - name: Typecheck
        run: |
          mypy pygeoif tests
      - name: Linting
        run: |
          ruff format --check pygeoif tests
          ruff check --no-fix pygeoif tests
          complexipy pygeoif
          yamllint .github/workflows/
      - name: Check complexity
        run: |
          radon cc --min B pygeoif
          radon mi --min B pygeoif
          lizard -l python -w pygeoif

  pypy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pypy-version: ['pypy-3.9', 'pypy-3.10', 'pypy-3.11']
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.pypy-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.pypy-version }}
      - name: Install dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -e ".[tests]"
      - name: Test with pytest, excluding hypothesis tests
        run: |
          pytest tests --ignore=tests/hypothesis

  graalpy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        graalpy-version: ['graalpy-24.1']
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Set up Python ${{ matrix.graalpy-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.graalpy-version }}
      - name: Install dependencies
        run: |
          uv pip install -e ".[tests]"
      - name: Test with pytest, including hypothesis tests
        run: |
          pytest tests

  build-and-check-package:
    name: Build & inspect our package.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - uses: hynek/build-and-inspect-python-package@v2
      - uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"
      - name: Check with pyroma
        run: |
          uv tool run pyroma .
      - name: Check tag name
        if: >-
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags')
        run: |
          uv tool run vercheck $GITHUB_REF_NAME pygeoif/about.py


  test-publish:
    if: >-
        github.event_name == 'push' &&
        github.repository == 'cleder/pygeoif' &&
        startsWith(github.ref, 'refs/tags')
    needs: [build-and-check-package, pypy, test-coverage, hypothesis-tests, cpython, static-tests, graalpy]
    name: Test install on TestPyPI
    runs-on: ubuntu-latest
    environment: test-release
    permissions:
      id-token: write
    steps:
      - name: Download packages built by build-and-check-package
        uses: actions/download-artifact@v5
        with:
          name: Packages
          path: dist

      - name: Upload package to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish:
    if: >-
      github.event_name == 'push' &&
      github.repository == 'cleder/pygeoif' &&
      github.ref == 'refs/heads/main'
    needs: [build-and-check-package, pypy, test-coverage, hypothesis-tests, cpython, static-tests, graalpy]
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download packages built by build-and-check-package
        uses: actions/download-artifact@v5
        with:
          name: Packages
          path: dist

      - name: Publish distribution ðŸ“¦ to PyPI for push to main
        uses: pypa/gh-action-pypi-publish@release/v1

...
